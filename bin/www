#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('persian-mode:server');
const https = require('https');
const http = require('http');
const fs = require('fs');
const env = require('../env');
const socket = require('../socket');
const port = normalizePort(process.env.SECURE_PORT || env.port || '3000');
const {initTokenRequest, getToken} = require('../lib/updateToken.model');

/**
 * Get port from environment and store in Express.
 */

let app, server, server2;
appWaiter = setInterval(() => {
  if(require('../app').isReady()) {
    console.log('App is set up');
    clearInterval(appWaiter);
    app = require('../app').get();
    app.set('port', port);

    /*
     * Create Https Server
     */
    const certPath = {
      key: '/cert/lithium.style.key',
      cert: '/cert/lithium.style.crt',
    };

    if (process.env.SECURE_PORT && fs.existsSync(certPath.key) && fs.existsSync(certPath.cert)) {
      server = https.createServer({
        key: fs.readFileSync(certPath.key),
        cert: fs.readFileSync(certPath.cert)
      }, app);
      server2 = http.createServer(app).listen(normalizePort(env.port || '3000'));
    } else {
      server = http.createServer(app);
    }

    /*
    * Listen on provided port, on all network interface.
    */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    if (server2) {
      server2.on('error', onError);
      server2.on('listening', onListening);
    }
    socket.setup(server);
  } else {
    console.log('App is being set up ...');
  }

}, 100);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/** get token from sms.ir server every 25 minutes*/